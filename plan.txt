Backlog:
- cancel disconnect on keyboard interrupts

Improvement
- More customised error messages
- Using *.log instead of .txt to log information
- Load logs upon server start
- Include authentication token during each transaction to improve security
- Inform all users when server shuts down
- Include concurrent update mechnism 
- When an UPD request is made, an ATU request is first sent to server to get 
    - full list of users, then another request is sent to individual. Caching could improve performance



UPD Improvement
- Receiving threads

Assumptions:
- User name is always one word (no space in between)
- During an UDP file transfer, it is assumed that the first packet (file name) is never lost, which is not true in reality

Server design considerations:
- Data structure
- handle Client keyboard interrupt

Client design considerations:
- All formating checks are done in client to reduce server workload
- Data structure
- Concurrent send files to multiple peers
- handle Key board interrupt


Functionalities:
- Message to server
- edit, delete, read messages
Stage one:
- Create login details
Stage two:
- Create log
- Log activities

Stage three client side commends:
MSG: Post Message
DLT: Delete Message
EDT: Edit Message
RDM: Read Message
ATU: Display active users
OUT: Log out and UPD: Upload file


07/04/2021
- handled repeated login
- handled logout during authentication
- Tested multithreading 
    - Keep track of # of users (port number? ip?)
- Created udp port in client

- use list to track first
    - created list to tack users
- Log actions
- Log messages (seperate log?)

12/04/2021
- Server handle actions
    - MSG: Post Message (done)
    - ATU: Display active users (done)
    - OUT: Log out (done) 
    - UPD: Upload file  

13/04/2021 AM 
- RDM: Read Message  (done)

14/04/2021
- EDT: Edit Message  (done)
    #3, Obi-wan: Computer Network Rocks, edited at 23 Feb 2021 16:01:10.
    #4, Obi-wan: IoT Rocks, posted at 23 Feb 2021 16:01:30
- DLT: Delete Message (done)
- Blocking after attempts (done)
- Messages are numbered starting from one

15/04/2021
- Logging active users
    - refresh log when user login
    - refresh log when user logout

19/04/2021

- Client
    - validate upd input
    - send ATU request and get list of users
    - search for username

- Multithreading with clients
    - start a thread to connect with server
        - also start a look to connect with clients
    - locks when transfering files and receiving files

21/04/2021
- Finished p2p file transfer
- Redid server display message
    - MSG: Post Message
    - DLT: Delete Message
    - EDT: Edit Message
    - RDM: Read Message
    - ATU: Display active users
    - OUT: Log out and 
    - UPD: Upload file

TODO:
- Logging after server action
    - MSG
    - EDT
    - DLT
    - LOGIN
    - LOGOUT

- Commenting and documentation 
- Server display message update
    - MSG
    - EDT
    - DLT
    - ATU
    - LOGIN
    - LOGOUT


Server code
- Build server
- Clean input argument 
- Authentication
    - Get username and password
    - Read credentias.txt
    - Check username
    - return error
        - start timing loop and lock user out
        - Lock user login 
Client 
- Connect TCP
- Bind UDP
- Clean input argument and raise error
- Estabilish connection
- Authentication loop
    - Login
- Command loop

# Starting a server
python3 server.py localhost 1025 5

# Starting a client
python3 client.py localhost 1025 10000



RDM 23 Feb 2021 16:01:30

Date format:
- %d %b %Y %H:%M:%S
- 23 Feb 2021 16:01:25


Testing Command

RDM:
    - RDM 13 Apr 2021 12:14:40
EDT:
    - EDT messagenumber timestamp message
    - EDT 1 15 Apr 2021 13:45:42 messges modified to yeeeeet
DLT: 
    - DLT messagenumber timestamp
    - DLT 1 14 Apr 2021 22:50:51

UPD
    - UPD adam plan.txt